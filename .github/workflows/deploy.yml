name: MapChat Spring Boot & Gradle & Docker & EC2 CD

on:
  push:
    branches: [ main ]
  pull_request: 
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest #ubuntu 최신 버전 
    env :
      working-directory: ./
      APPLICATION: ${{ secrets.APPLICATION }}
      APPLICATION_OAUTH: ${{ secrets.OAUTH }}
      
    steps:
      # 기본 체크아웃
      - name: Checkout
        uses: actions/checkout@v3

      # JDK version 설정
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'
      
      # Gradle Caching
#       - name: Cache Gradle packages
#         uses: actions/cache@v2
#         with:
#           path: |
#                ~/.gradle/caches
#                ~/.gradle/wrapper
#           key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle', '**/gradle-wrapper.properties') }}
#           restore-keys: |
#                 ${{ runner.os }}-gradle-
#       - uses: actions/checkout@v3
#       - run: touch ./src/main/resources/application.yml
#       - run: echo "${{env.APPLICATION}}"> ./src/main/resources/application.yml
#       - uses: actions/upload-artifact@v2
#         with:
#           name: application.yml
#           path: ./src/main/resources/application.yml
          
      - run: touch ./src/main/resources/application-oauth.yml
      - run: echo "${{env.APPLICATION_OAUTH}}"> ./src/main/resources/application-oauth.yml
      - uses: actions/upload-artifact@v2
        with:
          name: application-oauth.yml
          path: ./src/main/resources/application-oauth.yml
          
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
        working-directory: ${{ env.working-directory }}
      
      - name: Build with Gradle
        run: ./gradlew clean build
        working-directory: ${{ env.working-directory }}
        
#       - name: Cleanup Gradle Cache
#         if: ${{ always() }}
#         run: |
#             rm -f ~/.gradle/caches/modules-2/modules-2.lock
#             rm -f ~/.gradle/caches/modules-2/gc.properties
      
      # 여기서 $GITHUB_SHA라는 값을 사용하는데 이 값은 Github에서 기본적으로 제공하는 환경변수다.
      # $GITHUB_SHA는 해당 워크플로우를 트리거 한 커밋의 고유값이 할당되어있다.
      - name: Docker build
        run: |
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          docker build -t ${{ secrets.PROJECT_NAME }} .
          docker tag ${{ secrets.PROJECT_NAME }} ${{ secrets.DOCKER_HUB_REPO }}:${GITHUB_SHA::7} 
          docker push ${{ secrets.DOCKER_HUB_REPO }}:${GITHUB_SHA::7}
      
      - name: Deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_SERVER_HOST }}
          username: ec2-user
          key: ${{ secrets.PRIVATE_KEY }}
          envs: GITHUB_SHA
          script: |
              #!/bin/bash echo "${{ secrets.DOCKER_PASSWORD }}" | docker login docker.pkg.github.com -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
              #!/bin/bash docker pull ${{ secrets.DOCKER_HUB_REPO }}:${GITHUB_SHA::7}
              #!/bin/bash docker stop ${{ secrets.PROJECT_NAME }}
              #!/bin/bash docker rm ${{ secrets.PROJECT_NAME }}
              #!/bin/bash docker tag ${{ secrets.DOCKER_HUB_REPO }}:${GITHUB_SHA::7} ${{ secrets.PROJECT_NAME }}
              #!/bin/bash docker run -d --name ${{ secrets.PROJECT_NAME }} -p 80:8080 ${{ secrets.PROJECT_NAME }}
              
      - name: acion-slack
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          author_name: Github Action Test
          fields: repo, message, commit, author, action, eventName, ref, workflow, job, took
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        if: always()
    
